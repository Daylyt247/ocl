# (c) https://github.com/MontiCore/monticore

# Build JAVA applications using Apache Maven (http://maven.apache.org)

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository/
  key: "$CI_COMMIT_SHA" # Cache across branch and stage

stages:
  - build
  - test
  - post-test
  - mirror

Validate Gradle:
  image: registry.git.rwth-aachen.de/monticore/container-registry/gradle:6.5.1-jdk8
  stage: build
  allow_failure: true
  script:
    - gradle clean assemble
  artifacts:
    paths:
      - ./target/
    expire_in: 1 week

Unit Test Gradle:
  image: registry.git.rwth-aachen.de/monticore/container-registry/gradle:6.5.1-jdk8
  stage: test
  allow_failure: true
  needs: ["Validate Gradle"]
  dependencies:
    - Validate Gradle #download artifacts from build
  script:
    - gradle test

# Run Unit Tests after build
.unit_test_template: &unit_test_definition
  stage: test
  coverage: '/\d+.\d+ \% covered/'
  script:
    - gradle test
    - awk -F"," '{ instructions += $4 + $5; covered += $5 } END { print covered, "/", instructions, "instructions covered"; print 100*covered/instructions, "% covered" }' ./target/site/jacoco/jacoco.csv
  dependencies:
    - Validate Gradle #download artifacts from build
  needs: ["Validate Gradle"]
  artifacts:
    reports:
      junit:
        - ./target/surefire-reports/TEST-*.xml

Unit Test JDK 8:
  image: registry.git.rwth-aachen.de/monticore/container-registry/maven:3-jdk-8
  <<: *unit_test_definition

Unit Test JDK 11:
  image: registry.git.rwth-aachen.de/monticore/container-registry/maven:3-jdk-11
  # We do not require JDK 11 support yet. We appreciate it though.
  allow_failure: true
  <<: *unit_test_definition

Unit Test JDK 14:
  image: registry.git.rwth-aachen.de/monticore/container-registry/maven:3-jdk-14
  # We do not require JDK 14 support yet. We appreciate it though.
  allow_failure: true
  <<: *unit_test_definition

Unit Test Amazon Corretto JDK 8:
  image: registry.git.rwth-aachen.de/monticore/container-registry/maven:3-amazoncorretto-8
  # We do not require Amazon Corretto JDK support. We appreciate it though.
  allow_failure: true
  <<: *unit_test_definition

Code Quality:
  stage: post-test
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  cache: {}
  needs: [] # can run immediately 
  retry: 2
  tags:
    - shell
    - docker
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    # Update Codeclimate and SonarJava Plugin
    - docker run  --rm
      --env CODECLIMATE_CODE="$PWD"
      --env CONTAINER_TIMEOUT_SECONDS=150000
      --volume "$PWD":/code
      --volume /var/run/docker.sock:/var/run/docker.sock
      --volume /tmp/cc:/tmp/cc
      codeclimate/codeclimate engines:install
    # Check Code Quality
    - docker run --rm
      --env CODECLIMATE_CODE="$PWD"
      --env CONTAINER_TIMEOUT_SECONDS=150000
      --volume "$PWD":/code
      --volume /var/run/docker.sock:/var/run/docker.sock
      --volume /tmp/cc:/tmp/cc
      codeclimate/codeclimate analyze -f json > codeclimate.json
    #"registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
  artifacts:
    reports:
      codequality: codeclimate.json

Deploy Nexus:
  image: registry.git.rwth-aachen.de/monticore/container-registry/gradle:6.5.1-jdk8
  stage: post-test
  only:
    - master
    - develop 
  script:
    - gradle publish -PmavenPassword=$pass -PmavenUser=$user

Deploy Docker:
  stage: post-test
  variables:
    DOCKER_DRIVER: overlay2
  cache: {}
  only:
    - master
    - develop 
  tags:
    - shell
    - docker
    - node2
  script:
    - docker login -u sebot -p $sebot $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/ocl:latest .
    - docker image push $CI_REGISTRY_IMAGE/ocl:latest


Check MD Links:
  stage: post-test
  needs: [] # can run immediately 
  image: registry.git.rwth-aachen.de/monticore/container-registry/maven:3.5.4-jdk-8-alpine
  script:
    - "curl --location --header \"PRIVATE-TOKEN: $secibuildtoken\" \"https://git.rwth-aachen.de/api/v4/projects/monticore%2Fauxiliary-development-tools%2Fmdlinkchecker/jobs/artifacts/master/raw/target/libs/MDLinkCheckerCLI.jar?job=build\" --output MDLinkCheckerCLI.jar"
    - "url=https://git.rwth-aachen.de/monticore/languages/OCL/-/tree/develop"
    - "linkCheckRes=$(java -jar MDLinkCheckerCLI.jar -url $url -t $secibuildtoken)"
    - "echo \"$linkCheckRes\""
    - "if [[ $linkCheckRes == *\"ERROR\"* ]]; then exit 1; fi"
  only:
    - develop

githubmirror:
  image: registry.git.rwth-aachen.de/monticore/container-registry/maven:3-jdk-8
  stage: mirror
  dependencies:
    - Check MD Links
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SE_CIBUILD_SSH_PRIV_KEY")
    - echo "$SE_CIBUILD_SSH_PRIV_KEY" | tr -d '\r' | ssh-add -
    - git config --global user.email "noreply-ci@se-rwth.de"
    - git config --global user.name "MontiCore Mirroring Bot"
    - mkdir -p ~/.ssh
    - echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
  script:
    - "curl --location --header \"PRIVATE-TOKEN: $secibuildtoken\" \"https://git.rwth-aachen.de/api/v4/projects/monticore%2Fauxiliary-development-tools%2Fmdlinkchecker/jobs/artifacts/master/raw/target/libs/MDLinkChangerCLI.jar?job=build\" --output MDLinkChangerCLI.jar"
    - sh pre/mirror.sh
    - cd ..
    - "if [ -d \"tmp\" ]; then rm -rf tmp; fi"
    - mkdir "tmp"
    - cd tmp
    - git clone git@github.com:MontiCore/ocl.git
    - cd ..
    - rm -r tmp/ocl/*
    - dir
    - shopt -s extglob
    - mv OCL/!(MDLinkChangerCLI.jar) tmp/ocl/
    - cd tmp/ocl
    - git add --all
    - "(git commit -m 'Updated branch with most recent version.') || true"
    - git push --force
    - cd ..
    - cd ..
    - rm -rf tmp
    - exit 0
  only:
    - develop



/* (c) https://github.com/MontiCore/monticore */
package de.monticore.ocl;

/* Alpha-version: This is intended to become a MontiCore stable grammar. */

import de.monticore.expressions.CommonExpressions;
import de.monticore.ocl.expressions.*;
import de.monticore.types.*;
import de.monticore.literals.*;

grammar OCL extends MCCommonLiterals,
                    MCCollectionTypes,
                    SetExpressions,
                    OCLExpressions,
                    OptionalOperators

{
  OCLCompilationUnit =
    ("package" package:(Name& || ".")+ ";")?
    (MCImportStatement)*
    OCLArtifact
  ;

  start OCLCompilationUnit;

  /**
   * ASTOCLArtifact represents a file that contains an OCL-Constraint.
   *   @attribute Name
   *              Name of OCLFile (necessary for MCCompilationUnit)
   *   @attribute OCLConstraint
   *              List of OCL-constraints.
   */
  OCLArtifact =
    key("ocl") Name "{"
      OCLConstraint*
    "}"
  ;

  // Alternative aus MontiCore wäre LocalVariableDeclaration aus 
  // MCVarDeclarationStatements. Da hängt aber auch der MCModifier
  // mit dran, den man wieder per CoCo verbieten müsste und wäre 
  // genauso wie bei der OCLVariableDeclaration die wir durch die 
  // LocalVariableDeclaration würde aber auch das wieder verlangen
  // dass MCModifier mit einer surrealen Produktion implementiert wird
  OCLParamDeclaration = MCType Name ("=" Expression)?;

  /**
   * ASTOCLConstraint subsumes all OCL types that are used as embedded OCL.
   *   An OCLConstraint (Invariant or Method- or
   *   ConstructorSpec) or an abstract expression (expression).
   */
  interface scope OCLConstraint;

  /**
   * ASTOCLOperationSignature subsumes method and constructor signatures.
   */
  interface OCLOperationSignature;

  /**
   * ASTOCLOperationConstraint represents the typical method or constructor
   *   specifications with pre- and post-conditions.
   *   @attribute OCLOperationSignature
   *              Operation Signature (of a method or constructor).
   *   @attribute LetDeclaration
   *              Optional let-declarations.
   *   @attribute OCLPreStatement
   *              Optional pre-statements.
   *   @attribute OCLPostStatement
   *              Optional post-statements.
   */
  OCLOperationConstraint implements OCLConstraint =
    "context"
    OCLOperationSignature
    Expression?
    ("pre" pre:Name? ":" (preConditions:Expression+ ";")* )?
    ("post" post:Name? ":" (postConditions:Expression+ ";")* )?
  ;

  /**
   * ASTOCLInvariant represents the typical invariant definitions of OCL.
   *   @attribute OCLClassContext
   *              Optional keyword definitions: (context|import) and class definition
   *   @attribute name
   *              Name of the invariant.
   *   @attribute statements
   *              List of boolean expressions.
   */
  OCLInvariant implements OCLConstraint =
    // class context
    (
      (context:["context"] | Import:["import"])
      (OCLContextDefinition || ",")+
    )?

    // invariant
    "inv" name:Name?
    ("(" params:(OCLParamDeclaration || ",")* ")")? ":"

    // statements
    (Expression || ";")+
  ;

  /**
   * ASTOCLContextDefinition can be of the followoing type.
   *   Auction | Auction a | a in (...) | Auction a in (...)
   *   The rule is written as follows to avoid matching empty strings
   */
  OCLContextDefinition =
      MCType | Expression
  ;

  /**
   * ASTOCLMethodSignature defines the signature of a Java5 method.
   *   @attribute MCReturnType
   *              Optional complex type that is returned by given method
   *   @attribute methodName
   *              Name of given method.
   *
   *   Example : context Person.addMessages(Message m):
   */
  OCLMethodSignature implements OCLOperationSignature =
    MCReturnType?
    methodName:MCQualifiedName
    "(" params:(OCLParamDeclaration || ",")* ")"
    ("throws" throwables:(Name || ",")+)?
  ;

  /**
   * ASTOCLConstructorSignature defines signature of a constructor.
   *   @attribute ReferenceType
   *              Type of the Constructor.
   */
  OCLConstructorSignature implements OCLOperationSignature =
    "new" referenceType:Name
    "(" params:(OCLParamDeclaration || ",")* ")"
    ("throws" throwables:(Name || ",")+)?
  ;

  // Problem: MontiCore's LocalVariableDeclaration requires 
  // MCModifiers to be implemented, but OCL doesn't have any.
  // Hence, we now have a useless surreal production to fulfill 
  // MontiCore's requirements...
  OCLModifiers implements MCModifier = "test";
}

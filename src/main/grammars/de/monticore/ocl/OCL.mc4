/* (c) https://github.com/MontiCore/monticore */
package de.monticore.ocl;

/* Alpha-version: This is intended to become a MontiCore stable grammar. */

import de.monticore.UMLStereotype;
import de.monticore.ocl.expressions.*;
import de.monticore.expressions.BitExpressions;
import de.monticore.types.*;
import de.monticore.literals.*;

grammar OCL extends UMLStereotype,
                    MCSimpleGenericTypes,
                    SetExpressions,
                    OCLExpressions,
                    OptionalOperators,
                    BitExpressions
{
  /**
   *  ASTOCLCompilationUnit represents the entire content of an OCL model
   *    @attribute package
   *               The package declaration of the component model
   *    @attribute importStatement
   *               List of imported elements
   *    @attribute OCLArtifact
   *               wrapper for the ocl constraints
   */
  OCLCompilationUnit =
    ("package" package:(Name& || ".")+ ";")?
    (MCImportStatement)*
    OCLArtifact
  ;

  start OCLCompilationUnit;

  /**
   * ASTOCLArtifact represents a file that contains OCL-constraints.
   *   @attribute Name
   *              Name of OCLFile (necessary for MCCompilationUnit)
   *   @attribute OCLConstraint
   *              List of OCL-constraints.
   */
  OCLArtifact implements Diagram =
    key("ocl") Name "{"
      OCLConstraint*
    "}"
  ;

  /**
   * ASTOCLParamDeclaration defines a parameter for a method
   *   @attribute MCType
   *              Type of the parameter
   *   @attribute Name
   *              Name of the parameter
   *   @attribute Expression
   *              default value of the parameter
   */
  OCLParamDeclaration implements Variable =
    MCType Name ("=" Expression)?;

  /**
   * ASTOCLConstraint subsumes all OCL types that are used as embedded OCL.
   *   An OCLConstraint (Invariant or Method- or
   *   ConstructorSpec) or an abstract expression (expression).
   */
  interface scope OCLConstraint;

  /**
   * ASTOCLOperationSignature subsumes method and constructor signatures.
   */
  interface OCLOperationSignature;

  /**
   * ASTOCLOperationConstraint represents the typical method or constructor
   *   specifications with pre- and post-conditions.
   *   @attribute Stereotype
   *              Optional stereotypes
   *   @attribute OCLOperationSignature
   *              Operation Signature (of a method or constructor).
   *   @attribute OCLVariableDeclaration
   *              Optional variable declarations.
   *   @attribute OCLPreStatement
   *              Optional pre-statements.
   *   @attribute OCLPostStatement
   *              Optional post-statements.
   */
  OCLOperationConstraint implements OCLConstraint =
    (Stereotype)*
    "context"
    OCLOperationSignature
    ("let" (OCLVariableDeclaration || ";")+ )?
    ("pre" ":" (preConditions:Expression ";")+ )?
    ("post" ":" (postConditions:Expression ";")+ )?
  ;

  /**
   * ASTOCLInvariant represents the typical invariant definitions of OCL.
   *   @attribute Stereotype
   *              Optional stereotypes
   *   @attribute OCLContextDefinition
   *              Optional context in which to evaluate the invariant
   *   @attribute name
   *              Name of the invariant.
   *   @attribute OCLParamDeclaration
   *              parameters of the invariant
   *   @attribute statements
   *              List of boolean expressions.
   */
  //symbol // kann erst benutzt werden sobald MontiCore Issue #2656 erledigt ist
           // MontiCore erzeugt hier aktuell nicht-kompilierbaren Code
           // Sobald Ticket erledigt ist => "symbol" keyword benutzen und
           // diesen Kommentar l√∂schen
           // https://git.rwth-aachen.de/monticore/monticore/-/issues/2656
  OCLInvariant implements OCLConstraint =
    (Stereotype)*
    // class context
    (
      (context:["context"] | Import:["import"])
      (OCLContextDefinition || ",")+
    )?

    // invariant
    "inv" Name?
    ("(" params:(OCLParamDeclaration || ",")* ")")? ":"

    // statements
    (Expression || ";")+";"
  ;

  /**
   * ASTOCLContextDefinition can be of the following type.
   *   Auction | Auction a | a in (...) | Auction a in (...)
   *   The rule is written as follows to avoid matching empty strings
   */
  OCLContextDefinition =
      MCType | Expression | OCLParamDeclaration
  ;

  /**
   * ASTOCLMethodSignature defines the signature of a Java5 method.
   *   @attribute MCReturnType
   *              Optional complex type that is returned by given method
   *   @attribute methodName
   *              Name of given method.
   *   @attribute params
   *              Parameters of the method.
   *   @attribute throwables
   *              Possible exceptions of the method
   *
   *   Example : context Person.addMessages(Message m):
   */
  OCLMethodSignature implements OCLOperationSignature =
    MCReturnType?
    methodName:MCQualifiedName
    "(" params:(OCLParamDeclaration || ",")* ")"
    ("throws" throwables:(Name || ",")+)?
  ;

  /**
   * ASTOCLConstructorSignature defines signature of a constructor.
   *   @attribute ReferenceType
   *              Type of the Constructor.
   *   @attribute params
   *              Parameters of the method.
   *   @attribute throwables
   *              Possible exceptions of the method
   */
  OCLConstructorSignature implements OCLOperationSignature =
    "new" referenceType:Name
    "(" params:(OCLParamDeclaration || ",")* ")"
    ("throws" throwables:(Name || ",")+)?
  ;

  nokeyword "implies";
}

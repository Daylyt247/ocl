/* (c) https://github.com/MontiCore/monticore */
package de.monticore.ocl.expressions;

/* Alpha-version: This is intended to become a MontiCore stable grammar. */

import de.monticore.expressions.*;

/**
 * This grammar defines a expressions typical to UMLs OCL
 */
component grammar OCLExpressionsPrimaries
          extends OCLExpressionsBasis
{
  OCLIsNewPrimary implements OCLPrimary <100> =
      "isnew" "(" Expression ")";

  OCLDefinedPrimary implements OCLPrimary <100> =
      "defined" "(" Expression ")";

  /**
   * ASTOCLQualifiedPrimary represents qualified identifier.
   *   @attribute qualifications
   *              List of names of qualified identifier.
   *   @attribute postfixQualification
   *              Optional argument-, array- or atpre, **-qualifcation.
   *   @attribute OCLQualifiedPrimary
   *              Optional recursive linkage of qualified primary.
   *
   *   example: name.name.name(argument).nextQualifiedPrimary
   *            name.name[expr]
   *            name**
   *            name@pre
   */
  OCLQualifiedPrimary implements OCLPrimary <500> =
      (Name || ".")+
      postfix:OCLQualification?
      ("." OCLQualifiedPrimary)?
      ;

  /**
   * ASTOCLQualification defines qualification postfixes of a qualified
   *   primary. A qualification is one of the three kinds:
   *       - x[0] (ArrayQualification)
   *       - x(y) (ArgumentQualification)
   *       - x**  (TransitivQualification)
   *       - x@pre (AtPreQualification)
   */
  interface OCLQualification;

  OCLArrayQualification implements OCLQualification =
      ("[" arguments:Expression "]")+;

  OCLArgumentQualification implements OCLQualification =
      "(" (Expression || "," )* ")";

  OCLAtPreQualification implements OCLQualification =
      atpre:["@pre"];

  OCLTransitiveQualification implements OCLQualification =
      transitive:["**"];
}
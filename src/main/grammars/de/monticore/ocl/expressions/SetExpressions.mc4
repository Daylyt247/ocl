/* (c) https://github.com/MontiCore/monticore */
package de.monticore.ocl.expressions;

/* Alpha-version: This is intended to become a MontiCore stable grammar. */

import de.monticore.expressions.*;
import de.monticore.types.*;
import de.monticore.statements.*;


/**
 * This grammar defines a expressions typical to UMLs OCL
 */
component grammar SetExpressions
          extends ExpressionsBasis,
                  MCBasicTypes
{
  /*=================================================================*/

  SetInExpression implements Expression <110> =
    elem:Expression
    operator:"in"
    set:Expression;

  /*=================================================================*/

  UnionExpression implements Expression <180> =
    left:Expression
    operator:"union"
    right:Expression;

  IntersectionExpression implements Expression <180> =
    left:Expression
    operator:"intersect"
    right:Expression;

  // We do not introduce a special operator for the
  // difference, because the binary "-" operator can here be used as well

  /*=================================================================*/

  // sets of sets united (i.e. flattened) and intersected
  SetUnionExpression implements Expression <170> =
    "union" set:Expression;

  SetIntersectionExpression implements Expression <170> =
    "intersect" set:Expression;

  /*=================================================================*/

  // Logical expressions extended to sets of arguments
  SetAndExpression implements Expression <130> =
    "setand" set:Expression;

  SetOrExpression implements Expression <130> =
    "setor" set:Expression;

  /*=================================================================*/

  SetVariableDeclaration =
    MCType Name (dim:"[" "]")*;

  /**
   * ASTSetComprehension defines a comprehension with given
   *   characteristic.
   *   @attribute MCType
   *              Optional type of comprehension, e.g. Set, List or Collection.
   *   @attribute expression
   *              An expression (e.g. "x*x" or "x in Y").
   *   @attribute setComprehensionItems
   *              Characterization of comprehension as a list of
   *              comprehension-items. This can be generators, vardefinitions
   *              or filters.
   *   Note that we assume at least one generator (e.g. x in Y) in this AST.
   */
  SetComprehension implements Expression  <40> =
    MCType?
    "{" Expression "|"
                  (SetComprehensionItem || ",")+ "}"
    ;

  /**
   * ASTSetComprehensionItem defines the items that can occur 
   * on the right hand side of a comprehension.
   * This can be 
   *   Boolean expressions that act as filter, e.g. x < 6
   *   introductions on new local variables that act as
   *     intermediate result, e.g. int y = 2*x
   *   and generators that intoduce a new variable and let them
   *     range over a set of values, e.g.  x in S,
   *     y in 3..10, z in Set{3,5,10..20}
   *     (because .in. is also a boolean expression, the
   *      generator is syntactically covered by expression as well,
   *      but here as an obviously different semantics)
   */
  SetComprehensionItem =
    Expression |
    SetVariableDeclaration
    ;

  /**
   * ASTSetEnumeration is used for an enumeration of
   *   comprehension elements. Note that collection items are optional.
   *   @attribute MCType
   *              Optional type of comprehension, e.g. Set, List or Collection.
   *   @attribute setCollectionItems
   *              Enumerated elements as a list separated by , (comma).
   *              (e.g.: "1..3, x, y..z")
   */
  SetEnumeration implements Expression  <40> =
    MCType?
    "{" (SetCollectionItem || ",")* "}"
    ;

  interface SetCollectionItem;

  // list of allowed values
  SetValueItem implements SetCollectionItem =
    (Expression || ",")+
    ;

  // range of allowed values
  SetValueRange implements SetCollectionItem =
    lowerBound:Expression ".." upperBound:Expression
    ;
}

/* (c) https://github.com/MontiCore/monticore */
package de.monticore.ocl.expressions;

/* Alpha-version: This is intended to become a MontiCore stable grammar. */

import de.monticore.expressions.*;
import de.monticore.types.*;
import de.monticore.statements.*;


/**
 * This grammar defines a expressions typical to UMLs OCL
 */
component grammar SetExpressions
          extends CommonExpressions,
                  MCBasicTypes,
                  MCVarDeclarationStatements
{
  /*=================================================================*/

  SetInExpression implements Expression <190> =
    elem:Expression
    operator:"in"
    set:Expression;

  // TODO: Prioritten konfligieren mit denen aus Common Expressions: anpassen auf
  // sinnvollere Werte

  /*=================================================================*/

  UnionExpressionInfix implements Expression <180> =
    left:Expression
    operator:"union"
    right:Expression;

  IntersectionExpressionInfix implements Expression <180> =
    left:Expression
    operator:"intersect"
    right:Expression;

  // We do not introduce a special operator for the
  // difference, because the binary "-" operator can here be used as well

  /*=================================================================*/

  // sets of sets united (i.e. flattened) and intersected
  UnionExpressionPrefix implements Expression <170> =
    "union" set:Expression;

  IntersectionExpressionPrefix implements Expression <170> =
    "intersect" set:Expression;

  /*=================================================================*/

  // Logical expressions extended to sets of arguments
  SetAndExpression implements Expression <130> =
    "setand" set:Expression;

  SetOrExpression implements Expression <130> =
    "setor" set:Expression;

  /*=================================================================*/

  /**
   * ASTOCLComprehensionExpression defines comprehension kinds.
   *   e.g.:
   *       - {x * x | x in y} (OCLComprehensionExpressionStyle)
   *       - {1..3, x..10, y} (OCLComprehensionEnumerationStyle)
   */
  interface OCLComprehensionExpression;

  /**
   * ASTOCLComprehension represents comprehensions.
   *   @attribute SimpleReferenceType
   *              Optional type of comprehension, e.g. Set, List or Collection.
   *   @attribute expression
   *              Expression of comprehension.
   *   @attribute qualification
   *              Optional Qualification.
   */
  OCLComprehension implements Expression  <40> =
    MCType?
    "{" expression:OCLComprehensionExpression? "}"
    ("." qualification:Expression)?
    ;

  /**
   * ASTOCLComprehensionExpressionStyle defines a comprehension with given
   *   characteristic.
   *   @attribute expression
   *              An expression (e.g. "x*x" or "x in Y").
   *   @attribute comprehensionItems
   *              Characterization of comprehension as a list of
   *              comprehension-items. This can be generators, vardefinitions
   *              or filters.
   *   Note that we assume at least one generator (e.g. x in Y) in this AST.
   */
  OCLComprehensionExpressionStyle implements OCLComprehensionExpression <20> =
    Expression "|"
    (OCLComprehensionItem || ",")+
    ;

  OCLComprehensionItem =
    generator:Expression |
    declaration:LocalVariableDeclaration |
    filter:Expression
    ;

  /**
   * ASTOCLComprehensionEnumerationStyle is used for an enumeration of
   *   comprehension elements. Note that collection items are optional.
   *   @attribute collectionItems
   *              Enumerated elements as a list separated by , (comma).
   *              (e.g.: "1..3, x, y..z")
   */
  OCLComprehensionEnumerationStyle implements OCLComprehensionExpression <10> =
    (OCLCollectionItem || ",")*
    ;

  interface OCLCollectionItem;

  // list of allowed values
  OCLSetValueList implements OCLCollectionItem =
    (Expression || ",")+
    ;

  // range of allowed values
  OCLSetValueRange implements OCLCollectionItem =
    lowerBound:Expression ".." upperBound:Expression
    ;
}

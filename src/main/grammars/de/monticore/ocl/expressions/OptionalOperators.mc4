/* (c) https://github.com/MontiCore/monticore */
package de.monticore.ocl.expressions;

/* Alpha-version: This is intended to become a MontiCore stable grammar. */

import de.monticore.expressions.*;

component grammar OptionalOperators
          extends de.monticore.expressions.CommonExpressions
{
  // `opt ?: 0W` is equals to `opt.isPresent ? opt.get : 0W`
  // this operator is right associative, so that multiple optionals can be 
  // chained:
  // x ?: y ?: 0 is the same as x ?: (y ?: 0)
  // and this means that if x is present it returns x.get other it tries if y is
  // present if not it returns 0
  OptionalExpressionPrefix implements Expression <140>, InfixExpression = 
    <rightassoc> // priority between `==` and `<`
    left:Expression
    operator:"?:"
    right:Expression;

  // `x ?== y` is the same as `x.isPresent && x.get == y`
  // this is useful for underspecification relations, if it is underspecified 
  // (x.isAbsent) nothing must hold
  //
  // `x ?>= y` equals `x.isPresent && x.get >= y` -> the other operators work 
  // the same way

  OptionalLessEqualExpression implements Expression <150>, InfixExpression =
    left:Expression operator:"?<=" right:Expression;

  OptionalGreaterEqualExpression implements Expression <150>, InfixExpression =
    left:Expression operator:"?>=" right:Expression;

  OptionalLessThanExpression implements Expression <150>, InfixExpression =
    left:Expression operator:"?<" right:Expression;

  OptionalGreaterThanExpression implements Expression <150>, InfixExpression =
    left:Expression operator:"?>" right:Expression;

  OptionalEqualsExpression implements Expression <130>, InfixExpression =
    left:Expression operator:"?==" right:Expression;

  OptionalNotEqualsExpression implements Expression <130>, InfixExpression =
    left:Expression operator:"?!=" right:Expression;

  // x ?~~ y, is the same as x ?== y, except that the types of x and y must not 
  // (statically checkable) be compatible. However, x ?~~ y only holds, if x and 
  // y are of the same actual type or both absent.
  OptionalSimilarExpression implements Expression <130>, InfixExpression =
    left:Expression operator:"?~~" right:Expression;

  // x ?!~ y, is the same as x != y, except that the types of x and y must not 
  // be compatible (statically checkable) 
  OptionalNotSimilarExpression implements Expression <130>, InfixExpression =
    left:Expression operator:"?!~" right:Expression;
}

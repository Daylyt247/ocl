/* (c) https://github.com/MontiCore/monticore */

package ocl.monticoreocl;

component grammar MaxMinEvlisExpressions extends de.monticore.ExpressionsBasis {

   token TElvis = '?' ':';

    // indirect tokens
   // TMax = { _input.LT(1).getText().equals("max") }? Name; // do not want to destroy the name
   // TMin = { _input.LT(1).getText().equals("min") }? Name;

    MaxExpressionPrefix implements Expression <225> =
        "max"
        set:Expression; // normally this would be the best, but the precedence does not work yet

    MinExpressionPrefix implements Expression <225> =
        "min"
        set:Expression;

    SumExpressionPrefix implements Expression <225> =
        "sum"
        set:Expression;

    // `opt ?: 0W` is equals to `opt.isPresent ? opt.get : 0W`
    ElvisExpressionPrefix implements Expression <140> = // priority between `==` and `<`
        get:Expression
        TElvis
        orElse:Expression;
}

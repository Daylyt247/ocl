package ocl.monticoreocl.oclexpressions._ast;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class ASTOCLQualifiedPrimary extends ASTOCLQualifiedPrimaryTOP {
  public  ASTOCLQualifiedPrimary() {
    super();
  }

  public  ASTOCLQualifiedPrimary (/* generated by template ast.ConstructorParametersDeclaration*/
      java.util.List<ocl.monticoreocl.oclexpressions._ast.ASTName2> name2s
      ,
      Optional<ASTOCLQualification> postfixQualification
      ,
      Optional<ocl.monticoreocl.oclexpressions._ast.ASTOCLQualifiedPrimary> oCLQualifiedPrimary

  )
    /* generated by template ast.ConstructorAttributesSetter*/
  {
    super(name2s, postfixQualification, oCLQualifiedPrimary);
  }

  static public String name2String(ASTName2 name2) {
    if (name2.isMax())
      return "max";
    if (name2.isMin())
      return "min";
    if (name2.isSum())
      return "sum";
    return name2.getName();
  }

  static public List<String> name2StringList(List<ASTName2> list) {
    return list.stream().map(s -> name2String(s)).collect(Collectors.toList());
  }

  static public Optional<String> name2StringOpt(Optional<ASTName2> opt) {
    if (opt.isPresent()) {
      return Optional.of(name2String(opt.get()));
    }
    return Optional.empty();
  }

  public List<String> getNameList() {
    return name2StringList(getName2List());
  }
}

/**
 * ******************************************************************************
 *  MontiCAR Modeling Family, www.se-rwth.de
 *  Copyright (c) 2017, Software Engineering Group at RWTH Aachen,
 *  All rights reserved.
 *
 *  This project is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3.0 of the License, or (at your option) any later version.
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * *******************************************************************************
 */
package ocl.monticoreocl.oclexpressions._ast;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class ASTOCLQualifiedPrimary extends ASTOCLQualifiedPrimaryTOP {
  public  ASTOCLQualifiedPrimary() {
    super();
  }

  public  ASTOCLQualifiedPrimary (/* generated by template ast.ConstructorParametersDeclaration*/
      java.util.List<ocl.monticoreocl.oclexpressions._ast.ASTName2> name2s
      ,
      Optional<ASTOCLQualification> postfixQualification
      ,
      Optional<ocl.monticoreocl.oclexpressions._ast.ASTOCLQualifiedPrimary> oCLQualifiedPrimary

  )
    /* generated by template ast.ConstructorAttributesSetter*/
  {
    super(name2s, postfixQualification, oCLQualifiedPrimary);
  }

  static public String name2String(ASTName2 name2) {
    if (name2.isMax())
      return "max";
    if (name2.isMin())
      return "min";
    if (name2.isSum())
      return "sum";
    return name2.getName();
  }

  static public List<String> name2StringList(List<ASTName2> list) {
    return list.stream().map(s -> name2String(s)).collect(Collectors.toList());
  }

  static public Optional<String> name2StringOpt(Optional<ASTName2> opt) {
    if (opt.isPresent()) {
      return Optional.of(name2String(opt.get()));
    }
    return Optional.empty();
  }

  public List<String> getNameList() {
    return name2StringList(getName2List());
  }

  @Override
  public String toString() {
    return getNameList().stream().collect(Collectors.joining("."));
  }
}

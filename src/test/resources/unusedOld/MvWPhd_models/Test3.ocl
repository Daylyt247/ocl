/* (c) https://github.com/MontiCore/monticore */
import EmbeddedMontiArc.*;

ocl Test3 { // checks only derived type of apNames
context ComponentInst inv WCET_InfiteCores:
  let
    startSubs = {s in subs | this in s.sender }; // -> startSubs is Collection<ComponentInst>
    outPorts = {p in ports | p.direction == PortDirection.OUT}; // -> outPorts is Collection<PortInst>
    // selection: chains from subcomponents to
    // an output port
    selection = { chain in startSubs.start         | // startSubs.start is `Collection<Collection<ChainInst>>` but auto-flattening due to navigation to Collection<ChainInst>
                                                     // chain is `ChainInst` (due to flatten)
                  chain.end in outPorts };           // chain.end is `ElementInstance`
                                                     // selection is `Collection<ChainInst>`
    subChains = { chain in selection |               // chain is `ChainInst`
                  chain.elements.retainAll(subs)};   // chain.elements is `Collection<ElementInstance>`
                                                     // subChains is `Collection<ChainInst>`
    aggChains = { sum List{ max cmp.wcet ?: 0s |            // `aggChains` is `Collection<Number<Duration>>`
                                                            // `sum List { ... }` is `Number<Duration>`
                        cmp in chain.elements.component } | // `chain.elements.component` is Collection<Component>
                                                            // cmp is Component
                  chain in subChains };                     // chain is ChainInst
    aggregation = max aggChains ?: 0s;
    compareTo = min component.wcet ?: oo s;
  in
    aggregation <= compareTo
}

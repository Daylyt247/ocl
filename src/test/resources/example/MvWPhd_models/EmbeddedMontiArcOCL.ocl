import EmbeddedMontiArc.*;

// slide Ch04_PortValue

context NaturalNumber inv:
  value >= 1 &&
  !isPlusInf && !isMinusInf

context Matrix inv:
  depth ==1

context Vector inv:
  rows == 1

context Number inv:
  cols == 1;

// Ch04_PortTypeSystem
context StructItem inv:
  this.name == type.name

// Ch04_Parameter3
context ComponentParameter inv:
  type instanceof ComponentInterface

// Ch04_ComponentInstantiation
// --> Bug in OCL
//context Component inv:
//  forall t in implements.type:
//    t instanceof ComponentInterface


// TODO: this is incomplete: handle cases when t1.res or t2.res are absent
context NumericType t1, NumericType t2 inv:
  let
     maxSteps1 = {1 .. 2*Math.abs(t1.max.value / t1.res.value) + 1};
     range1 = { v | v = t1.min.value + k * t1.res.value, k in maxSteps1, v <= t1.max.value };
     maxSteps2 = {1 .. 2*Math.abs(t2.max.value / t2.res.value) + 1};
     range2 = { v | v = t2.min.value + k * t2.res.value, k in maxSteps2, v <= t2.max.value };
  in
    (t1 <= t2) <=>
    (t1.quantity == t2.quantity &&
    t1.cols == t2.cols &&
    t1.rows == t2.rows &&
    range2.containsAll(range1) &&
    t2.algebraicProperties.containsAll(t1.algebraicProperties))

context Connector inv:
  sourcePort.port.type <= targetPort.port.type

context PortInstantiation inv:
  portIndices.end <= port.dimension &&
  subIndices.end <= sub.dimension

context Range inv:
  start <= end

// Ch04_Effector

context Effector inv:
  sourceIndex.end <= sourcePort.dimension &&
  targetIndex.end <= sourcePort.dimension

context Effector inv:
  let
    sct = sourcePort.componentType;
    s = typeif sct instanceof Component then sct.subs else {};
  in
    sourcePort.direction == PortDirection.IN  &&
    targetPort.direction == PortDirection.OUT  &&
    sct == targetPort.componentType &&
    s == {}


// Ch04_Component

context Component inv:
  forall cmpType in implements.type:
    cmpType.ports.name == this.ports.name

context Component inv:
  let
    typeDimParams = {p in ports.type.addAll(ports.dimension) |
                     p instanceof Parameter};
  in
    this.subs != {} implies
    this.parameters ==
    subs.values.parameter
      .addAll(typeDimParams)
      .addAll( { param | param in this.parameters,
                        exists param2 in this.parameters:
                               param == param2.type})

// Ch04_CnCModel

context CnCModel inv:
  let
    inPorts = {p | p in components.ports, p.direction == PortDirection.IN};
  in
    forall p in inPorts:
      forall pi in PortInstantiation:
        (pi.port == p && pi.sub != main) implies
        (exists con in connectors:
           pi == con.targetPort)

/* (c) https://github.com/MontiCore/monticore */
package example.TGs_models;

import example.CDforOCLCheck.*;
import example.CDs.DefaultTypes.*;

ocl OCLAMApplications {

  context Analysis inv:     
    unusedTools == Tool.removeAll(
      {te.tool | ToolExecution te in execs.action});

  context Analysis inv:     
    unknownTP == 
      {FreeMarkerTemplate t | !t in Generator.template};

  context Analysis inv:     
    usedTP == 
      {te.template | TemplateExecution te in execs.action};

  context Analysis inv:     
    unusedTP == FreeMarkerTemplate.removeAll(usedTP);

  context Analysis inv:     
    noContrib ==
      {FreeMarkerTemplate t in usedTP | contributionFT.isEmpty};

  context Module inv: 
    containedModule == {this}.addAll(subModule**);

  context Module inv: 
    containedArtifact == containedModule.artifact;

  context Module inv: 
    externalReferredArtifact == 
      containedArtifact.refersTo.removeAll(containedArtifact);

  context Module inv: 
    reliesOnModule == externalArtifact.module;

  context Module inv: 
    externalProducedArtifact == 
      containedArtifact.produces.removeAll(containedArtifact);

  context Module inv: 
    contributionModule == externalArtifact.module;

  context Module m, Directory d in m.containedArtifact inv: 
    m.moduleDirectory == 
      {Directory sub | sub in d.contains**}.add(d);

  context Module m, JavaArtifact j in m.containedArtifact inv: 
    m.modulePkg == j.pkg;

  context Pkg inv: 
    javaSourceFile.parent in Directory implies 
      pkgDirectory == javaSourceFile.parent;    

  context Generator inv: 
    generatedJSystem == 
      {JSystem s | s.consistsOf(toolExecution.contributesTo)};

  context FreeMarkerTemplate inv: 
    contributionsRelyOn == contributionFT.contributionFT
      .addAll(contributionFT.refersTo.contributionFT);

  context Artifact inv: 
    toBeRecreated == !isHandcoded && (
      removed || 
      lastChange < max(createDependecy.lastChange) || 
      creationDependency.toBeRecreated || 
      output.output.toBeRecreated); 

  context ToolExecution e, Artifact a in e.output inv: 
    a.toBeRecreated implies e.toRepeat;  

  context JavaSourceFile inv: 
    typeUsage == defines.reliesOn.javaArtifact.remove(this); 

  context JavaSourceFile inv: 
    unusedImports == imports.removeAll(typeUsage); 

  context CDModelFile inv: 
    typeUsage == defines.reliesOn.javaArtifact
      .addAll(defines.reliesOn.cDModelFile).remove(this); 

  context CDModelFile inv: 
    unusedImports == imports.removeAll(typeUsage); 

}


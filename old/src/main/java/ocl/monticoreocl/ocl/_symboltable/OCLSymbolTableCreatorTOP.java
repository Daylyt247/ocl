/**
 *
 * (c) https://github.com/MontiCore/monticore
 *
 * The license generally applicable for this project
 * can be found under https://github.com/MontiCore/monticore.
 */
/**
 *
 * /* (c) https://github.com/MontiCore/monticore */
 *
 * The license generally applicable for this project
 * can be found under https://github.com/MontiCore/monticore.
 */
/* (c) https://github.com/MontiCore/monticore */
/* generated by template symboltable.SymbolTableCreator*/




package ocl.monticoreocl.ocl._symboltable;

import de.se_rwth.commons.logging.Log;

import ocl.monticoreocl.ocl._visitor.OCLVisitor;
import de.monticore.symboltable.MutableScope;
import de.monticore.symboltable.ResolvingConfiguration;
import de.monticore.symboltable.Scope;
import java.util.Deque;

public class OCLSymbolTableCreatorTOP extends de.monticore.symboltable.CommonSymbolTableCreator
    implements OCLVisitor {

  public OCLSymbolTableCreatorTOP(
      final ResolvingConfiguration resolvingConfig, final MutableScope enclosingScope) {
    super(resolvingConfig, enclosingScope);
  }

  public OCLSymbolTableCreatorTOP(final ResolvingConfiguration resolvingConfig, final Deque<MutableScope> scopeStack) {
    super(resolvingConfig, scopeStack);
  }

  private void initSuperSTC() {
  }

  /**
   * Creates the symbol table starting from the <code>rootNode</code> and
   * returns the first scope that was created.
   *
   * @param rootNode the root node
   * @return the first scope that was created
   */
  public Scope createFromAST(ocl.monticoreocl.ocl._ast.ASTOCLNode rootNode) {
    Log.errorIfNull(rootNode, "0xA7004x743 Error by creating of the OCLSymbolTableCreatorTOP symbol table: top ast node is null");
    rootNode.accept(realThis);
    return getFirstCreatedScope();
  }

  private OCLVisitor realThis = this;

  public OCLVisitor getRealThis() {
    return realThis;
  }

  @Override
  public void setRealThis(OCLVisitor realThis) {
    if (this.realThis != realThis) {
      this.realThis = realThis;
    }
  }

  @Override
  public void endVisit(ocl.monticoreocl.ocl._ast.ASTCompilationUnit ast) {
    setEnclosingScopeOfNodes(ast);
  }
  /* generated by template symboltable.symboltablecreators.SymbolMethods*/



  @Override
  public void visit(ocl.monticoreocl.ocl._ast.ASTOCLMethodDeclaration ast) {
    OCLMethodDeclarationSymbol oCLMethodDeclaration = create_OCLMethodDeclaration(ast);
    initialize_OCLMethodDeclaration(oCLMethodDeclaration, ast);
    addToScopeAndLinkWithNode(oCLMethodDeclaration, ast);
  }

  protected OCLMethodDeclarationSymbol create_OCLMethodDeclaration(ocl.monticoreocl.ocl._ast.ASTOCLMethodDeclaration ast) {
    return new OCLMethodDeclarationSymbol(ast.getName());
  }

  protected void initialize_OCLMethodDeclaration(OCLMethodDeclarationSymbol oCLMethodDeclaration, ocl.monticoreocl.ocl._ast.ASTOCLMethodDeclaration ast) {
    /* generated by template symboltable.symboltablecreators.InitializeSymbol*/




  }


}
